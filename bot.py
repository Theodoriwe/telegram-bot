import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import filters
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import os

API_TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHANNEL_ID = os.getenv("CHANNEL_ID")  # ID –∫–∞–Ω–∞–ª–∞ –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

users_received_promo = set()  # –•—Ä–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è"
def main_keyboard():
    keyboard = InlineKeyboardMarkup()
    button = InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="check_subscription")
    keyboard.add(button)
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥ üéÅ\n\nüëâ [–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è](https://t.me/{CHANNEL_ID})",
        reply_markup=main_keyboard(),
        parse_mode="Markdown"
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.callback_query_handler(lambda c: c.data == "check_subscription")
async def check_subscription(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –æ–Ω —É–∂–µ –ø—Ä–æ–º–æ–∫–æ–¥
    if user_id in users_received_promo:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "‚ùå –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –°–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    chat_member = await bot.get_chat_member(f"@{CHANNEL_ID}", user_id)
    if chat_member.status in ["member", "administrator", "creator"]:
        users_received_promo.add(user_id)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∏–≤—à–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–æ—Ç –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: **PROMO2024**", parse_mode="Markdown")
    else:
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async def broadcast_message(text):
    for user_id in users_received_promo:
        try:
            await bot.send_message(user_id, text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
@dp.message_handler(commands=["broadcast"])
async def send_broadcast(message: types.Message):
    if message.from_user.id != 755781875:  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
        return
    
    text = message.text.replace("/broadcast ", "")
    await broadcast_message(text)
    await message.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
