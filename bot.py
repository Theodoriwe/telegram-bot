import os
import psycopg2

def init_db():
    try:
        conn = psycopg2.connect(os.getenv("DATABASE_URL") + "?sslmode=require")
        with conn.cursor() as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    subscribed BOOLEAN DEFAULT FALSE,
                    promo_code VARCHAR(20),
                    promo_issued TIMESTAMP
                )
            ''')
        conn.commit()
        print("Database initialized successfully!")
    except Exception as e:
        print(f"Failed to initialize database: {e}")
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    init_db()
    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
import logging
from datetime import datetime
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import psycopg2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = os.getenv('ADMIN_ID')  # –í–∞—à ID –≤ Telegram
GROUP_ID = os.getenv('GROUP_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
required_env_vars = ['BOT_TOKEN', 'CHANNEL_ID', 'ADMIN_ID', 'DATABASE_URL']
for var in required_env_vars:
    if not os.getenv(var):
        raise ValueError(f"Missing environment variable: {var}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_db_connection():
    return psycopg2.connect(os.getenv('DATABASE_URL') + "?sslmode=require")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
def init_db():
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    subscribed BOOLEAN DEFAULT FALSE,
                    promo_code VARCHAR(20),
                    promo_issued TIMESTAMP
                )
            ''')
            conn.commit()

init_db()

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
def generate_unique_promo_code(cursor):
    while True:
        promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        cursor.execute("SELECT COUNT(*) FROM users WHERE promo_code = %s", (promo_code,))
        if not cursor.fetchone()[0]:
            return promo_code

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute('INSERT INTO users (user_id) VALUES (%s) ON CONFLICT DO NOTHING', (user_id,))
                conn.commit()
    except Exception as e:
        logger.error(f"Database error: {e}")

    keyboard = [[InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='check_sub')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {os.getenv('CHANNEL_LINK')}\n"
        "üéÅ –ò –ø–æ–ª—É—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ!",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    try:
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
                member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                subscribed = member.status in ['member', 'administrator', 'creator']

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
                cursor.execute('SELECT promo_code FROM users WHERE user_id = %s', (user_id,))
                promo_data = cursor.fetchone()

                if promo_data and promo_data[0]:
                    await query.edit_message_text("‚ö† –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
                    return

                if subscribed:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
                    promo_code = generate_unique_promo_code(cursor)
                    cursor.execute('''
                        UPDATE users 
                        SET subscribed = TRUE, promo_code = %s, promo_issued = %s 
                        WHERE user_id = %s
                    ''', (promo_code, datetime.now(), user_id))
                    conn.commit()
                    await query.edit_message_text(f"üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ!")
                     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø—É
                    group_message = f"-New Promo Code Issued-\n\n" \
                                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{user_id}`\n" \
                                    f"üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`"
                    try:
                        await context.bot.send_message(
                            chat_id=GROUP_ID,
                            text=group_message,
                            parse_mode="Markdown"
                        )
                    except Exception as e:
                        logger.error(f"Failed to send promo code to group: {e}")
                else:
                    await query.edit_message_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except Exception as e:
        logger.error(f"Error: {e}")
        await query.edit_message_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_ID:
        return

    message = " ".join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute("SELECT user_id FROM users")
            users = cursor.fetchall()

    success_count = 0
    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=message)
            success_count += 1
        except Exception as e:
            logger.error(f"Failed to send to {user[0]}: {e}")

    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {success_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler('broadcast', broadcast))
    application.run_polling()
