import os
import logging
from datetime import datetime
import random
import string
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import psycopg2

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')  # ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º)
ADMIN_ID = os.getenv('ADMIN_ID')  # –í–∞—à ID –≤ Telegram
DATABASE_URL = os.getenv('DATABASE_URL')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = psycopg2.connect(DATABASE_URL)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id BIGINT PRIMARY KEY,
        subscribed BOOLEAN DEFAULT FALSE,
        promo_code VARCHAR(20),
        promo_issued TIMESTAMP
    )
''')
conn.commit()

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        cursor.execute('INSERT INTO users (user_id) VALUES (%s) ON CONFLICT DO NOTHING', (user_id,))
        conn.commit()
    except Exception as e:
        logging.error(f"Database error: {e}")

    keyboard = [[InlineKeyboardButton("–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è! –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data='check_sub')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {os.getenv('CHANNEL_LINK')}\n"
        "üéÅ –ò –ø–æ–ª—É—á–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ!",
        reply_markup=reply_markup
    )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id

    await query.answer()

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        subscribed = member.status not in ['left', 'kicked']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        cursor.execute('SELECT promo_code FROM users WHERE user_id = %s', (user_id,))
        promo_data = cursor.fetchone()

        if promo_data and promo_data[0]:
            await query.edit_message_text("‚ö† –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            return

        if subscribed:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            promo_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
            cursor.execute('''
                UPDATE users 
                SET subscribed = TRUE, promo_code = %s, promo_issued = %s 
                WHERE user_id = %s
            ''', (promo_code, datetime.now(), user_id))
            conn.commit()

            await query.edit_message_text(f"üéâ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: {promo_code}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ!")
        else:
            await query.edit_message_text("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logging.error(f"Error: {e}")
        await query.edit_message_text("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) != ADMIN_ID:
        return

    message = " ".join(context.args)
    if not message:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return

    cursor.execute('SELECT user_id FROM users')
    users = cursor.fetchall()
    
    for user in users:
        try:
            await context.bot.send_message(chat_id=user[0], text=message)
        except Exception as e:
            logging.error(f"Failed to send to {user[0]}: {e}")

    await update.message.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")

if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler('broadcast', broadcast))

    application.run_polling()
